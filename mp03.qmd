---
title: "The Ultimate Playlist"
author: "Salvatore Davi"
format:
  html:
    toc: true
    toc-depth: 3
    css: |
      body {
        background-color: #F5F5DC;
      }
    code-fold: true
    code-summary: "Show the code"

execute:
  warning: false     # suppress warnings
  error: false       # halt on errors, don’t print them
  message: false     # suppress messages (e.g. package startup notes)

---

![The Ultimate Playlist!](docs/Asap_Mob.jpg)



# Introduction

In this project, we harness data to answer a simple but compelling question: what makes a song not just good, but universally loved? By tapping into two distinct data exports, one detailing track popularity metrics and another cataloguing song attributes (tempo, key, danceability, and energy) we can move beyond subjective taste and build an evidence‑backed "Ultimate Playlist.”

Back in high school and honestly, ever since, my playlists were ruled by ASAP Mob and especially ASAP Rocky. Even though the crew isn’t cranking out tracks like they used to, I’m ready to breathe new life into my listening lineup. This time, I’m letting the data steer the vibes and build the *truly* ultimate playlist. **Armed with analytics, I’ll uncover hidden gems and forgotten bangers that’ll keep every session feeling fresh and fire.**

This project is also insipired by the "All Rise" playlist, by Mr Barney Stinson, as the Ultimate Playtlist helps define a great aggregation of music into a single playlist based on what we love to hear most.

Below, we are pulling in the two datasets for this project straight from GitHub, preparing us for the analysis that follows.

### Data
```{r}
load_songs <- function() {
  library(readr)
  dir_path  <- "data/mp03"
  file_name <- "songs.csv"
  file_path <- file.path(dir_path, file_name)

  #checking dupolicate so that github will not block it
  if (!dir.exists(dir_path)) {
    dir.create(dir_path, recursive = TRUE)
  }
  
  # download
  if (!file.exists(file_path)) {
    download.file(
      "https://raw.githubusercontent.com/gabminamedez/spotify-data/refs/heads/master/data.csv",
      destfile = file_path,
      mode = "wb"
    )
  }
  
  # reading in dataset
  file_path |>
    read_csv(show_col_types = FALSE)
}

songs_df <- load_songs()

```



```{r}
library(dplyr)
library(tidyr)
library(stringr)
library(knitr)

clean_artist_string <- function(x) {
  x |>
    str_replace_all("\\['", "") |>
    str_replace_all("'\\]", "") |>
    str_replace_all("[ ]?'", "") |>
    str_replace_all("[ ]*,[ ]*", ",")
}

clean_songs <- songs_df |>
  separate_longer_delim(artists, ",") |>
  mutate(artist = clean_artist_string(artists)) |>
  select(-artists)
clean_songs |>
  head(5) |>
  kable(
    caption = "Songs Expanded by Artist",
    align   = c("l","l","r","r","r")  
  )
```
Thanks to the github user, gabminamedez, we have a master file of a catalogue of songs that contains their respective propertiers such as name, release_date, dancebility, energy and much more that will be integral for our analysis.

```{r}
#After donwloading the entire dataset, I could not render it on my PC. We are only slicing the first 1000 files.
#Credit: GPT for the for loop
library(jsonlite)

load_playlists <- function(n = 10) {
  base_url  <- "https://raw.githubusercontent.com/DevinOgrady/spotify_million_playlist_dataset/main/data1/"
  dir_path  <- "data/mp03/playlists"
  
  # Create folder 
  if (!dir.exists(dir_path)) {
    dir.create(dir_path, recursive = TRUE)
  }
  
  # Here we are beginning the sequence at 0 and stopping at 1000. Per professor's instructions.
  slice_starts <- seq(from = 0, by = 1000, length.out = n)
  
  playlists <- list()
  
  for (start in slice_starts) {
    end       <- start + 999
    file_name <- sprintf("mpd.slice.%d-%d.json", start, end)
    file_url  <- paste0(base_url, file_name)
    file_path <- file.path(dir_path, file_name)
    
    if (!file.exists(file_path)) {
      message("Downloading ", file_name)
      tryCatch(
        download.file(file_url, file_path, mode = "wb", quiet = TRUE),
        error = function(e) message("  ✗ Download failed for ", file_name)
      )
      if (!file.exists(file_path)) next
    }
    
    # Parse JSON safely
    data <- tryCatch(
      fromJSON(file_path),
      error = function(e) {
        message("  ✗ Failed to parse ", file_name)
        NULL
      }
    )
    
    if (!is.null(data)) {
      playlists[[length(playlists) + 1]] <- data$playlists
    }
  }
  
  playlists
}
playlists <- load_playlists(n = 10)

```

```{r}
library(dplyr)
library(tidyr)
library(stringr)

strip_spotify_prefix <- function(x) {
  str_extract(x, ".*:.*:(.*)", group = 1)
}
playlist_df <- playlists[[1]] |>
 
  mutate(
    playlist_name      = name,
    playlist_id        = strip_spotify_prefix(pid),
    playlist_followers = num_followers
  ) |>
  select(playlist_name, playlist_id, playlist_followers, tracks) |>
  unnest(tracks) |>
  
  # These are more of the columns that were specifid we needed for this project
  mutate(
    playlist_position = row_number(),                 
    artist_name       = artist_name,                   
    artist_id         = strip_spotify_prefix(artist_uri),
    track_name        = track_name,
    track_id          = strip_spotify_prefix(track_uri),
    album_name        = album_name,
    album_id          = strip_spotify_prefix(album_uri),
    duration          = duration_ms                    
  ) |>

  select(
    playlist_name,
    playlist_id,
    playlist_position,
    playlist_followers,
    artist_name,
    artist_id,
    track_name,
    track_id,
    album_name,
    album_id,
    duration
  )


```
## Initial Data Exploration

### How many distinct tracks and artists are represented in the playlist data?
```{r}
library(dplyr)
library(knitr)
playlist_df |>
  summarise(
    `Distinct Tracks`  = n_distinct(track_id),
    `Distinct Artists` = n_distinct(artist_id)
  ) |>
  kable(
    caption = "Unique Number of Artisits & Tracks",
    align   = "c"
  )


```
The playlist dataset contains 34,443 distinct tracks and 9,754 distinct artists. Quite a large range!

### What are the 5 most popular tracks in the playlist data?
```{r}
playlist_df |>
  count(
    track_name,
    artist_name,
    album_name,
    name = "Appearances"        
  ) |>
  arrange(desc(Appearances)) |>
  head() |>
  rename(
    `Track Name`                     = track_name,
    `Artist Name`                    = artist_name,
    `Album Name`                     = album_name,
    `Number of Playlist Appearances` = Appearances
  ) |>
  kable(
    caption = "Most Popular Tracks in Playlist Dataset",
    align   = "c"
  )

```
In the table above, we display the top songs in the playlist dataset. "One Dance" by Drake, takes top spot as it appears in 55 different playlists.

### What is the most popular track in the playlist data that does not have a corresponding entry in the song characteristics data?
```{r}
playlist_df |>
  anti_join(songs_df, by = c("track_id" = "id")) |>     
  count(
    track_name,
    artist_name,
    album_name,
    name = "Appearances"                                
  ) |>
  arrange(desc(Appearances)) |>                         
  slice_head(n = 1) |>                                  
  rename(                                               
    `Track Name`                     = track_name,
    `Artist Name`                    = artist_name,
    `Album Name`                     = album_name,
    `Number of Playlist Appearances` = Appearances
  ) |>
  kable(
    caption = "The Most Popular Track that is not in both Datasets",
    align   = "c"
  )



```
The song "One Dance" by Drake does not appear in the songs characteristics data.

### According to the song characteristics data, what is the most “danceable” track? How often does it appear in a playlist?
```{r}
top_song <- songs_df |>
  arrange(desc(danceability)) |>
  slice_head(n = 1)

appearance_count <- playlist_df |>
  filter(track_id == top_song$id) |>
  nrow()

top_song_table <- tibble(
  track_name            = top_song$name,
  danceability_score    = top_song$danceability,
  playlist_appearances  = appearance_count
)
top_song_table |>
  rename(
    "Track Name"            = track_name,
    "Danceability Score"    = danceability_score,
    "Playlist Appearances"  = playlist_appearances
  ) |>
  kable(
    caption = "Most Danceable Track and Its Playlist Appearances",
    align   = c("l", "r", "r")
  )



```
The most "danceable" track is Funky Cold Medina.

### Which playlist has the longest average track length?

```{r}
playlist_df |>
  group_by(playlist_name) |>
  summarise(
    mean_duration_ms   = mean(duration),
    median_duration_ms = median(duration),
    artist_name        = first(artist_name),
    .groups            = "drop"
  ) |>
  arrange(desc(mean_duration_ms)) |>
  slice_head(n = 1) |>
  mutate(
    `Mean duration (sec)`   = mean_duration_ms   / 1000,
    `Median duration (sec)` = median_duration_ms / 1000
  ) |>
  select(
    playlist_name,
    artist_name,
    `Mean duration (sec)`,
    `Median duration (sec)`
  ) |>
  rename(
    `Playlist Name` = playlist_name,
    `Artist Name`   = artist_name
  ) |>
  kable(
    caption = "",
    align   = "c"
  )

```
The playlist that has the longest average duration is 411 seconds (mean). The playlist is called "Classical" and is by "Pyotr Ilyich Tchaikovsky"

### What is the most popular playlist on Spotify?
```{r}
playlist_df |>
  slice_max(playlist_followers, n = 1, with_ties = FALSE) |>   # with_ties helps keep out duplicates from appearing
  mutate(`Duration (sec)` = duration / 1000) |>                # ms → sec
  select(
    playlist_name,
    playlist_position,
    playlist_followers,
    artist_name,
    album_name,
    `Duration (sec)`
  ) |>
  rename(
    `Playlist Name`     = playlist_name,
    `Playlist Position` = playlist_position,
    `Playlist Followers`= playlist_followers,
    `Artist Name`       = artist_name,
    `Album Name`        = album_name
  ) |>
  kable(
    caption = "Most popular playlist on Spotify",
    align   = "c"
  )

```
The most popular playlist on Spotify is "Tangled", with 1,038 followers.

## Visually Identifying Characteristics of Popular Songs

Inner joining both the song characteristics & playlist datasets. Dataframe will be called inner_joined_data.
```{r}
inner_joined_data <- songs_df |>
  rename(track_id = id) |>
  inner_join(playlist_df, by = "track_id")


```

### Is the popularity column correlated with the number of playlist appearances? If so, to what degree?

```{r}
library(ggplot2)

track_stats <- inner_joined_data |>
  count(track_id, popularity, name = "play_count")

#Pearson correlation between play count and popularity
corr_coef <- cor(track_stats$play_count, track_stats$popularity)


#Scatterplot
track_stats |>
  ggplot(aes(x = play_count, y = popularity)) +
  geom_point(alpha = 0.4, size = 2, color = "#2C3E50") +
  geom_smooth(method = "lm", color = "#E74C3C", se = FALSE) +
  scale_x_log10() +
  labs(
    title    = "Spotify Popularity vs. # of Playlist Appearances",
    subtitle = paste0("Pearson r = ", round(corr_coef, 2)),
    x        = "Playlist Appearances",
    y        = "Spotify Popularity "
  ) +
  theme_minimal(base_size = 14)

pop_cutoff <- 70



```
We conducted a Pearson correlation analysis to examine whether a song’s popularity score is related to its playlist position. The resulting correlation coefficient of 0.49 indicates a moderate positive relationship: in general, more‑popular songs tend to appear earlier in playlists. However, the correlation is far from perfect, so highly popular tracks can still show up infrequently—or later—on certain playlists.


### In what year were the most popular songs released?

```{r}
year_popularity <- inner_joined_data |>
  filter(year >= 1950) |>
  group_by(year) |>
  summarise(
    median_popularity = mean(popularity),
    .groups = "drop"
  ) |>
  arrange(desc(median_popularity))


year_popularity |>
  ggplot(aes(x = year, y = median_popularity)) +
  geom_point(size = 3, color = "#2C3E50") +
  geom_line(color = "#E74C3C", size = 1) +
  scale_x_continuous(
    breaks = seq(1950, max(year_popularity$year), by = 3)
  ) +
  labs(
    title = "Mean Spotify Popularity by Release Year (1950+)",
    x     = "Release Year",
    y     = "Mean Popularity"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)
  )


```

Over time, songs have generally grown in popularity. Beginning in the 1980s, however, the upward trend levels off, implying that a greater volume of popular tracks was released. This plateau likely reflects wider access to music via radio, television, physical media, and eventually the internet.

### In what year did danceability peak?


```{r}
year_dance <- inner_joined_data |>
  group_by(year) |>
  summarise(
    mean_danceability = mean(danceability),
    .groups = "drop"
  )

year_dance |>
  ggplot(aes(x = year, y = mean_danceability)) +
  geom_line(color = "steelblue", size = 1) +
  geom_point(color = "tomato", size = 2) +
  labs(
    title = "Trend Of Danceability by Release Year",
    x     = "Release Year",
    y     = "Mean Danceability"
  ) +
  theme_minimal(base_size = 14)
```


The chart plots average danceability in 25‑year release intervals. Danceability climbs steadily from the 1950s, reaching its highest point in 2020 during the 2010s, indicating that songs have become progressively more dance‑friendly over time.The value was at .673.

### Which decade is most represented on user playlists?
```{r}
inner_joined_data |>
  mutate(decade = (year %/% 10) * 10) |>
  count(decade, name = "Number Of Playlists") |>
  arrange(desc(`Number Of Playlists`)) |>
  slice_head(n = 5) |>
  ggplot(aes(
    x = factor(decade),
    y = `Number Of Playlists`,
    fill = factor(decade)         # map fill to decade
  )) +
  geom_col() +
  
  #legend title
  scale_fill_brewer(
    palette = "Set2",
    name    = "Decade"
  ) +
  
  labs(
    title = "Top 5 Most Represented Decades in Playlists",
    x     = "Decade",
    y     = "Number of Playlists"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "right",
    axis.text.x     = element_text(size = 12),
    plot.title      = element_text(face = "bold", hjust = 0.5)
  )



```

The 2010s have by far been the most reresented on users playlists. 


### Create a plot of key frequency among songs.
```{r}
library(ggplot2)
library(RColorBrewer)   # for brewer.pal()

key_labels <- c(
  "C",   "C#/Db", "D",   "D#/Eb", "E",   "F",
  "F#/Gb", "G",  "G#/Ab", "A",   "A#/Bb", "B"
)

key_counts <- inner_joined_data |>
  distinct(track_id, .keep_all = TRUE) |>
  count(key, name = "num_tracks") |>
  mutate(key_name = key_labels[key + 1])

top_key <- key_counts |> slice_max(num_tracks, n = 1)

n_keys <- nrow(key_counts)
base_colors <- brewer.pal(12, "Set3")[1:n_keys]
highlighted_colors <- base_colors
highlighted_colors[key_counts$key == top_key$key] <- "#E63946"

ggplot(key_counts, aes(x = key_name, y = num_tracks, fill = key_name)) +
  geom_col(width = 0.8, show.legend = FALSE) +
  geom_text(
    aes(label = num_tracks),
    position = position_stack(vjust = 0.5),
    color = "white",
    size = 3
  ) +
  coord_polar(start = 0) +
  scale_fill_manual(values = highlighted_colors) +
  labs(
    title    = "Distribution of Distinct Tracks by Musical Key",
    subtitle = paste0(
      "Most common key: ", top_key$key_name,
      " (", top_key$num_tracks, " tracks)"
    )
  ) +
  theme_minimal(base_size = 14) +
  theme(
    axis.title   = element_blank(),
    axis.text.y  = element_blank(),
    axis.ticks   = element_blank(),
    panel.grid   = element_blank(),
    plot.title   = element_text(face = "bold", hjust = 0.5),
    plot.subtitle= element_text(hjust = 0.5)
  )

```
To spotlight the tonal palette of our merged dataset, we spun up a vibrant rose (polar bar) chart that fans out each musical key around a full 360° circle. Every wedge represents one key it displayshow many distinct tracks are in that key, giving you an instant feel for which tonal centers dominate our playlists. Right away you can see that C is the highest with 1,185 tracks—while neighboring keys like C♯/D♭ and D trail closely behind. 

### What are the most popular track lengths? (Are short tracks, long tracks, or something in between most commonly included in user playlists?)
```{r}
# Bin track lengths into categories (in minutes)
length_bins <- inner_joined_data |>
  mutate(
    length_min = duration / 60000,
    length_bin = case_when(
      length_min < 2 ~ "< 2 min",
      length_min < 4 ~ "2–4 min",
      length_min < 6 ~ "4–6 min",
      length_min < 8 ~ "6–8 min",
      TRUE           ~ "8+ min"
    ),
    length_bin = factor(
      length_bin,
      levels = c("< 2 min", "2–4 min", "4–6 min", "6–8 min", "8+ min")
    )
  )

length_freq <- length_bins |>
  count(length_bin, name = "freq") |>
  arrange(desc(freq))

length_freq |>
  ggplot(aes(x = length_bin, y = freq)) +
  geom_col(fill = "#1ABC9C", width = 0.7) +
  labs(
    title = "Track Lengths in User Playlists",
    x     = "Track Length",
    y     = "Number of Appearances"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    axis.text.x  = element_text(size = 12),
    axis.title   = element_text(size = 14),
    plot.title   = element_text(size = 16, face = "bold", hjust = 0.5)
  )


```
The chart compares track length (in minutes) with how often songs appear in playlists. Most tracks cluster in the 2–4‑ and 4–6‑minute ranges, suggesting that songs of these lengths tend to be the most popular. Tracks shorter than two minutes or longer than six show a sharp drop‑off, indicating that listeners are less likely to include unusually brief or extended songs in their everyday playlists.

### Do higher‑energy songs tend to be more popular on Spotify?
```{r}
corr_coef <- inner_joined_data |>
  summarise(r = cor(energy, popularity)) |>
  pull(r)
print(paste("Pearson correlation:", round(corr_coef, 3)))

inner_joined_data |>
  ggplot(aes(x = energy, y = popularity)) +
  geom_point(alpha = 0.4, size = 2) +
  geom_smooth(method = "lm", se = FALSE, color = "#E74C3C") +
  labs(
    title    = "Spotify Popularity vs. Song Energy",
    subtitle = paste0("Pearson r = ", round(corr_coef, 2)),
    x        = "Energy",
    y        = "Spotify Popularity"
  ) +
  theme_minimal(base_size = 14)


```
A Spearman correlation of 0.02 between a track’s energy and its popularity shows virtually no systematic connection—amping up the energy does not, on its own, catapult a song onto more playlists. The coefficient is so close to zero that random variation could overwhelm any real effect, hinting (if anything) at a faintly opposite trend. In practice, elements like melody, marketing reach, and cultural zeitgeist likely play a much larger role in determining whether a track catches fire with listeners.


### Do more acoustic songs tend to be more or less popular on Spotify?
```{r}
inner_joined_data |>
  ggplot(aes(x = acousticness, y = popularity)) +
  geom_point(alpha = 0.3, size = 1.5, color = "#2C3E50") +
  
  geom_smooth(method = "lm", se = FALSE, color = "#E74C3C") +

  labs(
    title = "Spotify Popularity vs. Acousticness",
    x     = "Acousticness",
    y     = "Popularity"
  ) +
  theme_minimal(base_size = 14) +

  theme(
    plot.title = element_text(face = "bold", hjust = 0.5),
    axis.title = element_text(size = 12)
  )

```
There is a noticeable negative linear relationship between a track’s popularity and its acousticness—the more acoustic a song sounds, the less likely it is to rack up high popularity scores. Both metrics are right‑skewed, meaning most songs cluster at the “high‑popularity / low‑acousticness” end of the spectrum. In other words, if you want your next release to land on more user‑generated playlists, consider trimming back the unplugged, acoustic vibe and leaning into a more produced sound.

### Does the higher danceability of a song dictate its popularity?

```{r}
dance_pop <- inner_joined_data |>
  distinct(track_id, .keep_all = TRUE) |>
  select(danceability, popularity)

corr_coef <- cor(dance_pop$danceability, dance_pop$popularity)
print(paste("Pearson correlation:", round(corr_coef, 3)))

dance_pop |>
  ggplot(aes(x = danceability, y = popularity)) +
  geom_point(alpha = 0.4, size = 2, color = "#2C3E50") +
  geom_smooth(method = "lm", color = "#E74C3C", se = FALSE) +
  labs(
    title    = "Does Higher Danceability Predict Popularity?",
    subtitle = paste0("Pearson r = ", round(corr_coef, 2)),
    x        = "Danceability",
    y        = "Spotify Popularity"
  ) +
  theme_minimal(base_size = 14)

```
We tested whether more danceable songs tend to be more popular. The Spearman correlation coefficient is 0.12, indicating a negligible relationship; danceability does not meaningfully predict popularity in this dataset. Popularity is therefore most likely influenced by other factors such as artist visibility, marketing, or lyrical appeal—rather than just how dance-friendly a track is.

## Building The Ultimate Playlist 

To craft the ultimate playlist, we’ve selected A$AP Rocky’s “Fashion Killa” as the anchor track—the stylistic benchmark against which every other song will be measured. In the sections that follow, we’ll perform a data‑driven analysis of tempo, key, mood, and lyrical themes to uncover the tracks that complement its sleek, laid‑back vibe. The goal is a seamlessly flowing set that not only echoes the energy of “Fashion Killa” but also keeps listeners engaged from start to finish.

But also to keep it simple, I need some new music to listen to...

**Video For Fashion Killa** (Clean)


::: center
<iframe 
  width="560" 
  height="315" 
  src="https://www.youtube.com/embed/k3_iTjll12Q" 
  frameborder="0" 
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
  allowfullscreen>
</iframe>
:::


### Heuristic 1: What other songs commonly appear on playlists along side this song?
```{r}
#Get all playlist IDs that contain “Fashion Killa”
anchor_playlists <- inner_joined_data |>
  filter(track_name == "Fashion Killa") |>
  pull(playlist_id) |>
  unique()

cooccur_songs <- inner_joined_data |>
  filter(
    playlist_id %in% anchor_playlists,
    track_name   != "Fashion Killa"
  ) |>
  count(
    track_name,
    artist_name,
    popularity,              
    name = "cooccurrence_count"
  ) |>
  arrange(desc(cooccurrence_count))

cooccur_songs |>
  head(15) |>
  rename(
    "Track Name"         = track_name,
    "Artist Name"        = artist_name,
    "Popularity"         = popularity,
    "Concurrence Count"  = cooccurrence_count
  ) |>
  kable(
    caption = "Top 20 Songs Co‑occurring with “Fashion Killa”",
    align   = c("l", "l", "r", "r")
  )


```



### Heuristic 2: What other songs have a similar tempo & key?
```{r}
fk_info <- inner_joined_data |>
  filter(track_name == "Fashion Killa") |>
  slice_head(n = 1) |>
  select(fk_key = key, fk_tempo = tempo)

fk_key   <- fk_info$fk_key
fk_tempo <- fk_info$fk_tempo

# 
similar_songs <- inner_joined_data |>
  filter(
    key == fk_key,
    abs(tempo - fk_tempo) <= 5,
    track_name != "Fashion Killa"
  ) |>
  distinct(
    track_name,
    artist_name,
    album_name,
    tempo,
    popularity
  ) |>
  arrange(abs(tempo - fk_tempo)) |>
  slice_head(n = 15)

similar_songs |>
  select(track_name, artist_name, tempo, popularity) |>
  rename(
    "Track Name"  = track_name,
    "Artist Name" = artist_name,
    "Tempo"       = tempo,
    "Popularity"  = popularity
  ) |>
  head(20) |>
  kable(
    caption = "Songs in the same key and similar tempo to “Fashion Killa”",
    align   = c("l", "l", "r", "r")
  )

```



### Heuristic 3: What other songs were released by the same artist?
```{r}

# Find the artist of “Fashion Killa”
anchor_artist <- inner_joined_data |>
  filter(track_name == "Fashion Killa") |>
  pull(artist_name) |>
  unique()

other_songs <- inner_joined_data |>
  filter(
    artist_name == anchor_artist,
    track_name   != "Fashion Killa"
  ) |>
  distinct(track_name, artist_name) |>   # keep both columns
  arrange(track_name)

other_songs |>
  rename(
    "Track Name"  = track_name,
    "Artist Name" = artist_name
  ) |>
  kable(
    caption = "Other Songs by the Same Artist as “Fashion Killa”",
    align   = c("l", "l")
  )


```


### Heuristic 4: What other songs were released in the same year and have similar levels of acousticness, danceability, etc.?
```{r}
fk <- inner_joined_data |>
  filter(track_name == "Fashion Killa") |>
  slice_head(n = 1)
ac_fk  <- fk$acousticness
da_fk  <- fk$danceability
en_fk  <- fk$energy
li_fk  <- fk$liveness
yr_fk  <- fk$year


candidates <- inner_joined_data |>
  filter(
    year       == yr_fk,
    track_name != "Fashion Killa"
  ) |>
  distinct(track_id, .keep_all = TRUE)

similar_songs_acos <- candidates |>
  mutate(
    distance = sqrt(
      (acousticness - ac_fk)^2 +
      (danceability - da_fk)^2 +
      (energy       - en_fk)^2 +
      (liveness     - li_fk)^2
    )
  ) |>
  arrange(distance) |>       
  slice_head(n = 10) |>      
  select(
    track_name,
    artist_name,
    popularity,
    acousticness,
    danceability,
    energy,
    liveness,
    distance
  )

similar_songs_acos |>
  rename(
    "Track Name"   = track_name,
    "Artist Name"  = artist_name,
    "Popularity"   = popularity,
    "Acousticness" = acousticness,
    "Danceability" = danceability,
    "Energy"       = energy,
    "Liveness"     = liveness,
    "Distance"     = distance
  ) |>
  kable(
    caption = "Top 10 Songs Closest to Fashion Killa by Euclidean Distance",
    align   = c("l","l","r","r","r","r","r","r")
  )


```
Euclidean distance measures the straight‐line distance between two points in multi‐dimensional space by taking the square root of the sum of squared differences across each dimension. In our code, we treated each song’s audio features (acousticness, danceability, energy, liveness) as coordinates in a four‐dimensional space and computed the distance between every candidate track and the anchor song “Fashion Killa.” This sounds pretty complicated just takeaway that using the 4 features we computed the distance between one song and another song, esentailly finding the closest ones based on the features.


### Heuristic 5: What other songs co-occur with Fashion Killa in other playlists have the most daceability?
```{r}

anchor_playlists <- inner_joined_data |>
  filter(track_name == "Fashion Killa") |>
  pull(playlist_id) |>
  unique()
cooccur_candidates <- inner_joined_data |>
  filter(
    playlist_id %in% anchor_playlists,
    track_name   != "Fashion Killa"
  ) |>
  distinct(track_id, .keep_all = TRUE)

# Sort by danceability 
top_dance_cooccur <- cooccur_candidates |>
  arrange(desc(danceability)) |>
  select(
    `Track Name`   = track_name,
    `Artist Name`  = artist_name,
    `Danceability` = danceability,
    `Popularity`   = popularity
  ) |>
  slice_head(n = 10)

top_dance_cooccur |>
  kable(
    caption = "Top 10 Most Danceable Songs Co-occurring with “Fashion Killa”",
    align   = c("l", "l", "r", "r")
  )




```


This final playlist is the result of all of the analysis befoore. Taking the five heuristic's into this final list, we will create a list that includes a mixture of popular and non-popular songs. We measured non popular songs by those that have <65 score in the dataset. 

# Final Playlist

```{r}
sample_top <- function(df, n) {
  df |>
    slice_head(n = n) |>
    select(
      tn = matches("(?i)track[_ ]?name"),
      an = matches("(?i)artist[_ ]?name")
    ) |>
    rename(
      track_name  = tn,
      artist_name = an
    )
}

ultimate_tracks <- bind_rows(
  sample_top(cooccur_songs,       5),  
  sample_top(similar_songs,       2),  
  sample_top(other_songs,         2),  
  sample_top(similar_songs_acos,  2),  
  sample_top(top_dance_cooccur,   2)   
)

```



```{r}
song_list <- ultimate_tracks$track_name

song_popularity <- inner_joined_data |>
  filter(track_name %in% song_list) |>
  group_by(track_name) |>
  summarise(
    `Artist Name` = first(artist_name),
    Popularity    = first(popularity),
    .groups = "drop"
  ) |>
  mutate(
    `Track Name` = factor(track_name, levels = song_list)
  ) |>
  arrange(`Track Name`) |>
  select(`Track Name`, `Artist Name`, Popularity)

song_popularity |>
  kable(
    caption = "Ultimate Playlist",
    align   = c("l", "l", "r")
  )


```


```{r}
playlist_features <- ultimate_tracks |>
  left_join(
    inner_joined_data |>
      distinct(track_name, .keep_all = TRUE) |>
      select(track_name, danceability, tempo, energy),
    by = "track_name"
  ) |>
  mutate(track_num = row_number())

ggplot(playlist_features, aes(x = track_num, y = danceability)) +
  geom_line(color = "#2C3E50", size = 1.2) +
  labs(
    title = "Danceability",
    x     = "Track Order",
    y     = "Danceability"
  ) +
  scale_x_continuous(breaks = NULL) +
  theme_minimal(base_size = 14)

ggplot(playlist_features, aes(x = track_num, y = tempo)) +
  geom_line(color = "#E74C3C", size = 1.2) +
  labs(
    title = "Tempo Across Sampled Tracks",
    x     = "Track Order",
    y     = "Tempo"
  ) +
  scale_x_continuous(breaks = NULL) +
  theme_minimal(base_size = 14)

ggplot(playlist_features, aes(x = track_num, y = energy)) +
  geom_line(color = "#8E44AD", size = 1.2) +
  labs(
    title = "Energy",
    x     = "Track Order",
    y     = "Energy"
  ) +
  scale_x_continuous(breaks = NULL) +
  theme_minimal(base_size = 14)


```

To assemble the playlist, each candidate song was scored against several data-driven metrics:

- **Playlist co-occurrence** — frequency with which the track appears alongside our seed songs in public playlists  
- **Tempo-Key similarity** — songs that contain similar characteristics in tempo and key  
- **Acousticness alignment** — consistency in acoustic properties to keep the overall sound cohesive  
- **Danceability overlap** — shared rhythmic characteristics with the top dance-oriented tracks  
- **Artist catalog depth** — releases that best represent each featured artist (mostly their best work)  

We also stratified selections by Spotify popularity to showcase both mainstream hits and hidden gems:

- **Popular ≥ 60** — well-known tracks with broad listener base (6 are included)
- **Non-popular < 60** — underrated songs that deserve more play  (6 are included)

This balance keeps the playlist fresh while giving lesser-known tracks a spotlight.

Blending these heuristics produced the **ultimate 12-song playlist** below.


**WARNING**  Please listen at your discretion! Some songs may contain explicit material. Unfortunately Spotify does not house clean versions for alot of these songs.

<iframe
  style="border-radius:12px"
  src="https://open.spotify.com/embed/playlist/0Q5uNz2bpAlrXoRc8wkSMl?utm_source=generator"
  width="100%"
  height="352"
  frameborder="0"
  allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
  loading="lazy">
</iframe>

